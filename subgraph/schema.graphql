type Init @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  token: Bytes! # address
}

type User @entity {
  id: Bytes!
  subscribeEvents: [Subscribe!]! @derivedFrom(field: "user") # can't have a User with a subscribe
  unsubscribeEvents: [Unsubscribe!] @derivedFrom(field: "user")
  extendEvents: [Unsubscribe!] @derivedFrom(field: "user")
  userSubscriptions: [UserSubscription!] @derivedFrom(field: "user")
  authorizedSigners: [AuthorizedSigner!] @derivedFrom(field: "user")
  # a total count of all events of all types. useful for pagination
  eventCount: Int!
  events: [UserSubscriptionsEvent!] @derivedFrom(field: "user")
}

type Subscribe @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  user: User!
  start: BigInt! # uint64
  end: BigInt! # uint64
  rate: BigInt! # uint128
}

type Unsubscribe @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  user: User!
}

type Extend @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  user: User!
  end: BigInt! # uint64
}

type UserSubscription @entity {
  id: Bytes!
  user: User!
  """
  uint164 timestamp value of the current `Subscription.start` on the Subscriptions contract.
  When the user calls the `subscribe` method on the contract, this value is updated to either be:
  the `start` value passed to the `subscribe` method, OR, the block timestamp of the transaction;
  whichever is greater.
  This means that as the user interacts with their Subscription (upgrade, downgrade, renew), this value is updated.
  """
  start: BigInt!
  """
  uint164 timestamp value of the current `Subscription.end` on the Subscriptions contract.
  """
  end: BigInt!
  rate: BigInt! # uint128
  # The subgraph preserves `end` timestamp of cancelled UserSubscriptions to enable showing it in UI
  # Even if not cancelled an expired UserSubscription is inactive.
  cancelled: Boolean!
  # BillingPeriods associated to the `UserSubscription`
  billingPeriods: [BillingPeriod!]! @derivedFrom(field: "subscription")
}

type AuthorizedSigner @entity {
  id: Bytes! #keccak256 hex string of user:signer
  user: User!
  signer: Bytes! #address
}

"""
BillingPeriod is a thegraph.com/studio specific design paradigm that holds value in the Subgraph and downstream consumers.
It is a holder for a `start` and `end` timestamp of the period of time - 30 days - that the `UserSubscription` exists in.
This way, as the user interacts with their Subscription - which changes the `start` timestamp - the Billing Period remains consistent.
The Billing Period is used to provide these `start` and `end` timestamp values so that KPIs, monthly-quotas and charts
can build a representation of the Subscription usage in this derived period.
Query totals are also summed in this period, and this value is then used decrement the amount of queries the Subscription
has remaining in the period; which enforces the monthly-quota Subscription usage.
"""
type BillingPeriod @entity(immutable: true) {
  id: Bytes! #keccak256 hex string of user:start
  subscription: UserSubscription! # relation back to the UserSubscription the BillingPeriod is tracking
  start: BigInt! # uint164 timestamp of the start of the BillingPeriod
  end: BigInt! # uint164 timestamp of the end of the BillingPeriod
}

"""
Enum of available User UserSubscription Event types based off the action the user performed
"""
enum UserSubscriptionsEventType {
  # The user created a net-new UserSubscription
  CREATED
  # The user canceled their active UserSubscription
  CANCELED
  # The user renewed (extended the ending timestamp) of their active UserSubscription
  RENEW
  # The user upgraded (set the rate to a higher value -> more queries available) of their active UserSubscription
  UPGRADE
  # The user downgraded (set the rate to a lower value -> less queries available) of their active UserSubscription
  DOWNGRADE
}

"""
Generic interface that maps user events in the UserSubscriptions contract.

Some example events:
- User creates a net-new UserSubscription -> UserSubscriptionCreatedEvent
- User cancels their active UserSubscription -> UserSubscriptionCanceledEvent
- User renews their active UserSubscription -> UserSubscriptionRenewalEvent
- User upgrades their active UserSubscription -> UserSubscriptionUpgradeEvent
- User downgrades their active UserSubscription -> UserSubscriptionDowngradeEvent
"""
interface UserSubscriptionsEvent {
  # keccak256 hex string of user:{event type}:txHash
  id: Bytes!
  user: User!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: Bytes!
  eventType: UserSubscriptionsEventType!
}

"""
User created a net-new active UserSubscription
"""
type UserSubscriptionCreatedEvent implements UserSubscriptionsEvent
  @entity(immutable: true) {
  # keccak256 hex string of user:created:timestamp
  id: Bytes!
  user: User!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: Bytes!
  # will always be UserSubscriptionsEventType.CREATED
  eventType: UserSubscriptionsEventType!
  # the user's UserSubscription.start value at the time the event is created
  currentSubscriptionStart: BigInt! # uint64
  # the user's UserSubscription.end value at the time the event is created
  currentSubscriptionEnd: BigInt! # uint64
  # the user's UserSubscription.rate value at the time the event is created
  currentSubscriptionRate: BigInt! # uint128
}

"""
User canceled their active UserSubscription
"""
type UserSubscriptionCanceledEvent implements UserSubscriptionsEvent
  @entity(immutable: true) {
  # keccak256 hex string of user:canceled:timestamp
  id: Bytes!
  user: User!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: Bytes!
  # will always be UserSubscriptionsEventType.CANCELED
  eventType: UserSubscriptionsEventType!
  # the amount of unlocked tokens transferred back to the user as a result of cancelling the UserSubscription
  tokensReturned: BigInt!
}

"""
User renewed their active UserSubscription.

Renewing means that the user extended the end timestamp of their active UserSubscription to a later timestamp.
"""
type UserSubscriptionRenewalEvent implements UserSubscriptionsEvent
  @entity(immutable: true) {
  # keccak256 hex string of user:renew:timestamp
  id: Bytes!
  user: User!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: Bytes!
  # will always be UserSubscriptionsEventType.RENEW
  eventType: UserSubscriptionsEventType!
  # the user's UserSubscription.start value at the time the event is created
  currentSubscriptionStart: BigInt! # uint64
  # the user's UserSubscription.end value at the time the event is created
  currentSubscriptionEnd: BigInt! # uint64
  # the user's UserSubscription.rate value at the time the event is created
  currentSubscriptionRate: BigInt! # uint128
}

"""
User upgraded their active UserSubscription.

Upgrading means that the user increased the `rate` on their active UserSubscription, granting them more query volume.
"""
type UserSubscriptionUpgradeEvent implements UserSubscriptionsEvent
  @entity(immutable: true) {
  # keccak256 hex string of user:upgrade:timestamp
  id: Bytes!
  user: User!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: Bytes!
  # will always be UserSubscriptionsEventType.UPGRADE
  eventType: UserSubscriptionsEventType!
  # the UserSubscription.start value before the user upgraded their UserSubscription
  previousSubscriptionStart: BigInt! # uint64
  # the UserSubscription.end value before the user upgraded their UserSubscription
  previousSubscriptionEnd: BigInt! # uint64
  # the UserSubscription.rate value before the user upgraded their UserSubscription
  previousSubscriptionRate: BigInt! # uint128
  # the user's UserSubscription.start value at the time the event is created
  currentSubscriptionStart: BigInt! # uint64
  # the user's UserSubscription.end value at the time the event is created
  currentSubscriptionEnd: BigInt! # uint64
  # the user's UserSubscription.rate value at the time the event is created
  currentSubscriptionRate: BigInt! # uint128
}

"""
User downgraded their active UserSubscription.

Downgrading means that the user decreased the `rate` on their active UserSubscription, granting them less query volume.
"""
type UserSubscriptionDowngradeEvent implements UserSubscriptionsEvent
  @entity(immutable: true) {
  # keccak256 hex string of user:downgrade:timestamp
  id: Bytes!
  user: User!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: Bytes!
  # will always be UserSubscriptionsEventType.DOWNGRADE
  eventType: UserSubscriptionsEventType!
  # the UserSubscription.start value before the user downgraded their UserSubscription
  previousSubscriptionStart: BigInt! # uint64
  # the UserSubscription.end value before the user downgraded their UserSubscription
  previousSubscriptionEnd: BigInt! # uint64
  # the UserSubscription.rate value before the user downgraded their UserSubscription
  previousSubscriptionRate: BigInt! # uint128
  # the user's UserSubscription.start value at the time the event is created
  currentSubscriptionStart: BigInt! # uint64
  # the user's UserSubscription.end value at the time the event is created
  currentSubscriptionEnd: BigInt! # uint64
  # the user's UserSubscription.rate value at the time the event is created
  currentSubscriptionRate: BigInt! # uint128
}
