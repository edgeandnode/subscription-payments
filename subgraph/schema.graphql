type Init @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  token: Bytes! # address
}

type User @entity(immutable: true) {
  id: Bytes!
  subscribeEvents: [Subscribe!]! @derivedFrom(field: "user") # can't have a User with a subscribe
  unsubscribeEvents: [Unsubscribe!] @derivedFrom(field: "user")
  extendEvents: [Unsubscribe!] @derivedFrom(field: "user")
  activeSubscriptions: [ActiveSubscription!] @derivedFrom(field: "user")
  authorizedSigners: [AuthorizedSigner!] @derivedFrom(field: "user")
}

type Subscribe @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  user: User!
  start: BigInt! # uint64
  end: BigInt! # uint64
  rate: BigInt! # uint128
}

type Unsubscribe @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  user: User!
}

type Extend @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  user: User!
  end: BigInt! # uint64
}

type ActiveSubscription @entity {
  id: Bytes!
  user: User!
  start: BigInt! # uint64
  end: BigInt! # uint64
  rate: BigInt! # uint128
}

type AuthorizedSigner @entity {
  id: Bytes! #keccak256 hex string of user:signer
  user: User!
  signer: Bytes! #address
}
